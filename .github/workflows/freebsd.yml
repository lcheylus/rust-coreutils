name: FreeBSD

# spell-checker:ignore sshfs usesh vmactions taiki Swatinem esac fdescfs fdesc sccache nextest copyback

env:
  FEATURES: "unix"
  # * style job configuration
  STYLE_FAIL_ON_FAULT: true ## (bool) fail the build if a style job contains a fault (error or warning); may be overridden on a per-job basis

on:
  # To run manually workflow
  workflow_dispatch:
  # pull_request:
  # push:
  #   branches:
  #     - main

permissions:
  contents: read # to fetch code (actions/checkout)

# End the current execution if there is a new changeset in the PR.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # Style and Lint job
  style:
    name: Style and Lint
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    # Get rustc version (stable) for FreeBSD with fake script
    # Needed for rust-cache action to set cache key
    - name: Get rust version for FreeBSD
      run: |
        sudo cp /home/runner/.cargo/bin/rustc rustc.orig
        sudo cp ci/fake_rustc_freebsd-stable.sh /home/runner/.cargo/bin/rustc
        echo "## Fake rustc version for FreeBSD"
        rustc -vV

    # Action for Rust cache (copy to/from VM via copyback)
    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "v0-rust-freebsd"

    # Restore original rustc binary on Ubuntu runner
    - name: Restore rustc binary
      run: |
        mv rustc.orig /home/runner/.cargo/bin/rustc
        echo "## rustc version for Ubuntu runner"
        rustc -vV

    - name: Prepare, style and lint
      uses: vmactions/freebsd-vm@v1.1.3
      with:
        envs: "STYLE_FAIL_ON_FAULT FEATURES"
        usesh: true
        sync: rsync
        copyback: true
        # We need jq and GNU coreutils to run show-utils.sh and bash to use inline shell string replacement
        prepare: pkg install -y curl sudo jq coreutils bash
        run: |
          # Code inspired from rustup project https://github.com/rust-lang/rustup/blob/master/.github/workflows/ci.yaml
          # NOTE: All steps need to be run in this block, otherwise, we are operating back on the Ubuntu host
          set -e

          TEST_USER=tester
          export REPO_NAME=${GITHUB_WORKSPACE##*/}
          export WORKSPACE_PARENT="/home/runner/work/${REPO_NAME}"
          export WORKSPACE="${WORKSPACE_PARENT}/${REPO_NAME}"

          pw adduser -n ${TEST_USER} -d /root/ -g wheel -c "Coreutils user to build" -w random
          chown -R ${TEST_USER}:wheel /root/ "${WORKSPACE_PARENT}"/
          whoami

          # Further work needs to be done in a sudo as we are changing users
          sudo -E -u ${TEST_USER} bash ci/freebsd_style_lint.sh

          # Change ownership for copyback files from VM to host
          chown -R root:wheel /root/ "${WORKSPACE_PARENT}"/

  # Job for tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      fail-fast: false
    env:
      mem: 4096
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"

    steps:
    - uses: actions/checkout@v4

    # Get rustc version (stable) for FreeBSD with fake script
    # Needed for rust-cache action to set cache key
    - name: Get rust version for FreeBSD
      run: |
        sudo cp /home/runner/.cargo/bin/rustc rustc.orig
        sudo cp ci/fake_rustc_freebsd-stable.sh /home/runner/.cargo/bin/rustc
        echo "## Fake rustc version for FreeBSD"
        rustc -vV

    # Action for Rust cache (copy to/from VM via copyback)
    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "v0-rust-freebsd"

    # Restore original rustc binary on Ubuntu runner
    - name: Restore rustc binary
      run: |
        mv rustc.orig /home/runner/.cargo/bin/rustc
        echo "## rustc version for Ubuntu runner"
        rustc -vV

    - name: Configure sccache
      uses: mozilla-actions/sccache-action@v0.0.5

    - name: Prepare, build and test
      uses: vmactions/freebsd-vm@v1.1.3
      with:
        usesh: true
        sync: rsync
        copyback: true
        envs: "FEATURES SCCACHE_GHA_ENABLED RUSTC_WRAPPER ACTIONS_CACHE_URL ACTIONS_RUNTIME_TOKEN"
        prepare: pkg install -y curl sudo bash sccache
        run: |
          # Code inspired from rustup project https://github.com/rust-lang/rustup/blob/master/.github/workflows/ci.yaml
          # NOTE: All steps need to be run in this block, otherwise, we are operating back on the Ubuntu host
          set -e

          # We need a file-descriptor file system to test test_ls::test_ls_io_errors
          mount -t fdescfs fdesc /dev/fd

          TEST_USER=tester
          export REPO_NAME=${GITHUB_WORKSPACE##*/}
          export WORKSPACE_PARENT="/home/runner/work/${REPO_NAME}"
          export WORKSPACE="${WORKSPACE_PARENT}/${REPO_NAME}"

          pw adduser -n ${TEST_USER} -d /root/ -g wheel -c "Coreutils user to build" -w random
          chown -R ${TEST_USER}:wheel /root/ "${WORKSPACE_PARENT}"/
          whoami

          # Further work needs to be done in a sudo as we are changing users
          sudo -E -u ${TEST_USER} bash ci/freebsd_tests.sh

          # Change ownership for copyback files from VM to host
          chown -R root:wheel /root/ "${WORKSPACE_PARENT}"/

          # Check tests results
          if [ -f ${WORKSPACE}/tests-ok ]; then
              exit 0
          else
              exit 1
          fi

    - name: Generate Markdown report for tests results
      if: success() || failure()
      run: |
        if [ -f tests-unix.json ]; then
            ci/get_tests_results.sh tests-unix.json unix >> $GITHUB_STEP_SUMMARY
        fi
        if [ -f tests-uucore.json ]; then
            ci/get_tests_results.sh tests-uucore.json uucore >> $GITHUB_STEP_SUMMARY
        fi

    - name: Stats for sccache on FreeBSD
      run: |
        echo "# sccache stats"
        cat sccache-stats.txt
