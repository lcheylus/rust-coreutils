name: FreeBSD

# spell-checker:ignore sshfs usesh vmactions taiki Swatinem esac fdescfs fdesc sccache nextest copyback

env:
  # * style job configuration
  STYLE_FAIL_ON_FAULT: true ## (bool) fail the build if a style job contains a fault (error or warning); may be overridden on a per-job basis

on:
  # To run manually workflow
  workflow_dispatch:
  # pull_request:
  # push:
  #   branches:
  #     - main

permissions:
  contents: read # to fetch code (actions/checkout)

# End the current execution if there is a new changeset in the PR.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # Style and Lint job
  style:
    name: Style and Lint
    runs-on: ${{ matrix.job.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-22.04 , features: unix }
    # env:
    #   SCCACHE_GHA_ENABLED: "true"
    #   RUSTC_WRAPPER: "sccache"

    steps:
    - uses: actions/checkout@v4
    # Action for Rust cache (copy to/from VM via copyback)
    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "v0-rust-freebsd"

    # Restore original rustc binary
    - name: Restore rustc binary
      run: |
        mv rustc.orig /home/runner/.cargo/bin/rustc
        echo "## rustc version for Ubuntu runner"
        rustc -vV

  #   - name: Run sccache-cache
  #     uses: mozilla-actions/sccache-action@v0.0.3

    - name: Prepare, build and test
      uses: vmactions/freebsd-vm@v1.0.5
      with:
        usesh: true
        sync: rsync
        copyback: true
        # We need jq and GNU coreutils to run show-utils.sh and bash to use inline shell string replacement
        prepare: pkg install -y curl sudo jq coreutils bash
        run: |
          ## Prepare, build, and test
          # Code inspired from rustup project https://github.com/rust-lang/rustup/blob/master/.github/workflows/ci.yaml
          # NOTE: All steps need to be run in this block, otherwise, we are operating back on the Ubuntu host
          set -e

          TEST_USER=tester
          export REPO_NAME=${GITHUB_WORKSPACE##*/}
          export WORKSPACE_PARENT="/home/runner/work/${REPO_NAME}"
          export WORKSPACE="${WORKSPACE_PARENT}/${REPO_NAME}"

          pw adduser -n ${TEST_USER} -d /root/ -g wheel -c "Coreutils user to build" -w random
          chown -R ${TEST_USER}:wheel /root/ "${WORKSPACE_PARENT}"/
          whoami

          # Further work needs to be done in a sudo as we are changing users
          sudo -E -u ${TEST_USER} bash ci/freebsd_style_lint.sh

          # Change ownership for copyback files from VM to host
          chown -R root:wheel /root/ "${WORKSPACE_PARENT}"/

  # Tests job
  # test:
  #   name: Tests
  #   runs-on: ${{ matrix.job.os }}
  #   timeout-minutes: 90
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       job:
  #         - { os: ubuntu-22.04 , features: unix }
  #   env:
  #     mem: 4096
  #     SCCACHE_GHA_ENABLED: "true"
  #     RUSTC_WRAPPER: "sccache"
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: Swatinem/rust-cache@v2
  #   - name: Run sccache-cache
  #     uses: mozilla-actions/sccache-action@v0.0.3
  #   - name: Prepare, build and test
  #     uses: vmactions/freebsd-vm@v1.0.5
  #     with:
  #       usesh: true
  #       sync: rsync
  #       copyback: false
  #       prepare: pkg install -y curl gmake sudo
  #       run: |
  #         ## Prepare, build, and test
  #         # implementation modelled after ref: <https://github.com/rust-lang/rustup/pull/2783>
  #         # * NOTE: All steps need to be run in this block, otherwise, we are operating back on the mac host
  #         set -e
  #         #
  #         # We need a file-descriptor file system to test test_ls::test_ls_io_errors
  #         mount -t fdescfs fdesc /dev/fd
  #         #
  #         TEST_USER=tester
  #         REPO_NAME=${GITHUB_WORKSPACE##*/}
  #         WORKSPACE_PARENT="/home/runner/work/${REPO_NAME}"
  #         WORKSPACE="${WORKSPACE_PARENT}/${REPO_NAME}"
  #         #
  #         pw adduser -n ${TEST_USER} -d /root/ -g wheel -c "Coreutils user to build" -w random
  #         # chown -R ${TEST_USER}:wheel /root/ "${WORKSPACE_PARENT}"/
  #         chown -R ${TEST_USER}:wheel /root/ "${WORKSPACE_PARENT}"/
  #         whoami
  #         #
  #         # Further work needs to be done in a sudo as we are changing users
  #         sudo -i -u ${TEST_USER} sh << EOF
  #         set -e
  #         whoami
  #         curl https://sh.rustup.rs -sSf --output rustup.sh
  #         sh rustup.sh -y --profile=minimal
  #         . $HOME/.cargo/env
  #         # Install nextest
  #         mkdir -p ~/.cargo/bin
  #         curl -LsSf https://get.nexte.st/latest/freebsd | tar zxf - -C ~/.cargo/bin
  #         ## Info
  #         # environment
  #         echo "## environment"
  #         echo "CI='${CI}'"
  #         echo "REPO_NAME='${REPO_NAME}'"
  #         echo "TEST_USER='${TEST_USER}'"
  #         echo "WORKSPACE_PARENT='${WORKSPACE_PARENT}'"
  #         echo "WORKSPACE='${WORKSPACE}'"
  #         env | sort
  #         # tooling info
  #         echo "## tooling info"
  #         cargo -V
  #         cargo nextest --version
  #         rustc -V
  #         #
  #         # To ensure that files are cleaned up, we don't want to exit on error
  #         set +e
  #         cd "${WORKSPACE}"
  #         unset FAULT
  #         cargo build || FAULT=1
  #         export PATH=~/.cargo/bin:${PATH}
  #         export RUST_BACKTRACE=1
  #         export CARGO_TERM_COLOR=always
  #         if (test -z "\$FAULT"); then cargo nextest run --hide-progress-bar --profile ci --features '${{ matrix.job.features }}' || FAULT=1 ; fi
  #         if (test -z "\$FAULT"); then cargo nextest run --hide-progress-bar --profile ci --all-features -p uucore || FAULT=1 ; fi
  #         # Clean to avoid to rsync back the files
  #         # cargo clean
  #
  #         if (test -n "\$FAULT"); then exit 1 ; fi
  #         EOF
