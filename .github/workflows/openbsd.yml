name: OpenBSD

env:
  # * style job configuration
  STYLE_FAIL_ON_FAULT: true ## (bool) fail the build if a style job contains a fault (error or warning); may be overridden on a per-job basis

on:
  # To run manually workflow
  workflow_dispatch:
  # pull_request:
  # push:
  #   branches:
  #     - main

permissions:
  contents: read # to fetch code (actions/checkout)

# End the current execution if there is a new changeset in the PR.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # style:
  #   name: Style and Lint
  #   runs-on: ${{ matrix.job.os }}
  #   timeout-minutes: 90
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       job:
  #         - { os: ubuntu-22.04 , features: unix }
  #   env:
  #     SCCACHE_GHA_ENABLED: "true"
  #     RUSTC_WRAPPER: "sccache"
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: Swatinem/rust-cache@v2
  #   - name: Run sccache-cache
  #     uses: mozilla-actions/sccache-action@v0.0.3
  #   - name: Prepare, build and test
  #     uses: vmactions/openbsd-vm@v1.0.6
  #     with:
  #       usesh: true
  #       sync: rsync
  #       copyback: false
  #       # We need jq to run show-utils.sh and bash to use inline shell string replacement
  #       # install rust-1.72.1, rust-rustfmt-1.72.1 and rust-clippy-1.72.1 from OpenBSD 7.4 release
  #       prepare: |
  #         pkg_add -I coreutils curl sudo-1.9.14.2 jq bash
  #         pkg_add -I rust rust-rustfmt rust-clippy
  #       run: |
  #         ## Prepare, build, and test
  #         # implementation modelled after ref: <https://github.com/rust-lang/rustup/pull/2783>
  #         # * NOTE: All steps need to be run in this block, otherwise, we are operating back on the mac host
  #         set -e
  #         #
  #         TEST_USER=tester
  #         REPO_NAME=${GITHUB_WORKSPACE##*/}
  #         WORKSPACE_PARENT="/home/runner/work/${REPO_NAME}"
  #         WORKSPACE="${WORKSPACE_PARENT}/${REPO_NAME}"
  #         # Generate random password for user
  #         PASSWD=$(encrypt $(openssl rand -base64 12))
  #         # Create user for build
  #         useradd -d /root/ -g wheel -c "Coreutils user to build" -p ${PASSWD} ${TEST_USER}
  #         chown -R ${TEST_USER}:wheel /root/ "${WORKSPACE_PARENT}"/
  #         whoami
  #         #
  #         # Further work needs to be done in a sudo as we are changing users
  #         sudo -i -u ${TEST_USER} bash << EOF
  #         set -e
  #         whoami
  #         # Increase the number of file descriptors - See https://github.com/rust-lang/cargo/issues/11435
  #         ulimit -n 1024
  #         ## VARs setup
  #         cd "${WORKSPACE}"
  #         unset FAIL_ON_FAULT ; case '${{ env.STYLE_FAIL_ON_FAULT }}' in
  #         ''|0|f|false|n|no|off) FAULT_TYPE=warning ;;
  #         *) FAIL_ON_FAULT=true ; FAULT_TYPE=error ;;
  #         esac;
  #         FAULT_PREFIX=\$(echo "\${FAULT_TYPE}" | tr '[:lower:]' '[:upper:]')
  #         # * determine sub-crate utility list
  #         UTILITY_LIST="\$(./util/show-utils.sh --features ${{ matrix.job.features }})"
  #         CARGO_UTILITY_LIST_OPTIONS="\$(for u in \${UTILITY_LIST}; do echo -n "-puu_\${u} "; done;)"
  #         ## Info
  #         # environment
  #         echo "## environment"
  #         echo "CI='${CI}'"
  #         echo "REPO_NAME='${REPO_NAME}'"
  #         echo "TEST_USER='${TEST_USER}'"
  #         echo "WORKSPACE_PARENT='${WORKSPACE_PARENT}'"
  #         echo "WORKSPACE='${WORKSPACE}'"
  #         echo "FAULT_PREFIX='\${FAULT_PREFIX}'"
  #         echo "UTILITY_LIST='\${UTILITY_LIST}'"
  #         env | sort
  #         # tooling info
  #         echo "## tooling info"
  #         cargo -V
  #         rustc -V
  #         #
  #         # To ensure that files are cleaned up, we don't want to exit on error
  #         set +e
  #         unset FAULT
  #         ## cargo fmt testing
  #         echo "## cargo fmt testing"
  #         # * convert any errors/warnings to GHA UI annotations; ref: <https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-a-warning-message>
  #         S=\$(cargo fmt -- --check) && printf "%s\n" "\$S" || { printf "%s\n" "\$S" ; printf "%s\n" "\$S" | sed -E -n -e "s/^Diff[[:space:]]+in[[:space:]]+\${PWD//\//\\\\/}\/(.*)[[:space:]]+at[[:space:]]+[^0-9]+([0-9]+).*\$/::\${FAULT_TYPE} file=\1,line=\2::\${FAULT_PREFIX}: \\\`cargo fmt\\\`: style violation (file:'\1', line:\2; use \\\`cargo fmt -- \"\1\"\\\`)/p" ; FAULT=true ; }
  #         ## cargo clippy lint testing
  #         if [ -z "\${FAULT}" ]; then
  #           echo "## cargo clippy lint testing"
  #           # * convert any warnings to GHA UI annotations; ref: <https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-a-warning-message>
  #           S=\$(cargo clippy --all-targets \${CARGO_UTILITY_LIST_OPTIONS} -- -W clippy::manual_string_new -D warnings 2>&1) && printf "%s\n" "\$S" || { printf "%s\n" "\$S" ; printf "%s" "\$S" | sed -E -n -e '/^error:/{' -e "N; s/^error:[[:space:]]+(.*)\\n[[:space:]]+-->[[:space:]]+(.*):([0-9]+):([0-9]+).*\$/::\${FAULT_TYPE} file=\2,line=\3,col=\4::\${FAULT_PREFIX}: \\\`cargo clippy\\\`: \1 (file:'\2', line:\3)/p;" -e '}' ; FAULT=true ; }
  #         fi
  #         # Clean to avoid to rsync back the files
  #         cargo clean
  #         if [ -n "\${FAIL_ON_FAULT}" ] && [ -n "\${FAULT}" ]; then exit 1 ; fi
  #         EOF

  test:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      fail-fast: false
    env:
      mem: 4096
    steps:
    - uses: actions/checkout@v4
    # - name: Get URL for cargo-nextest latest release
    #   run: |
    #     sudo apt-get install -y curl
    #     LATEST_NEXTEST_URL=$(curl -sLf https://api.github.com/repos/lcheylus/cargo-nextest-openbsd/releases/latest | grep 'download_url' | cut -d\" -f4)
    #     echo "LATEST_NEXTEST_URL=${LATEST_NEXTEST_URL}"
    #     echo "LATEST_NEXTEST_URL=${LATEST_NEXTEST_URL}" >> $GITHUB_ENV
    - name: Prepare, build and test
      uses: vmactions/openbsd-vm@v1.0.6
      with:
        # envs: 'LATEST_NEXTEST_URL'
        usesh: true
        sync: rsync
        copyback: false
        # We need jq to run show-utils.sh and bash to use inline shell string replacement
        # install rust-1.72.1, rust-rustfmt-1.72.1 and rust-clippy-1.72.1 from OpenBSD 7.4 release
        prepare: |
          pkg_add -I coreutils curl gmake sudo-1.9.14.2 jq bash
          pkg_add -I rust rust-rustfmt rust-clippy zstd
        run: bash ci/openbsd_tests.sh
