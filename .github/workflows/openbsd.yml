name: OpenBSD

env:
  # * style job configuration
  STYLE_FAIL_ON_FAULT: true ## (bool) fail the build if a style job contains a fault (error or warning); may be overridden on a per-job basis
  FEATURES: "unix"

on:
  # To run manually workflow
  workflow_dispatch:
  # pull_request:
  # push:
  #   branches:
  #     - main

permissions:
  contents: read # to fetch code (actions/checkout)

# End the current execution if there is a new changeset in the PR.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  style:
    name: Style and Lint
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      fail-fast: false
      # matrix:
      #   job:
      #     - { os: ubuntu-latest , features: unix }
    steps:
    - uses: actions/checkout@v4

    - name: Prepare, build and test
      uses: vmactions/openbsd-vm@v1.0.6
      with:
        envs: "STYLE_FAIL_ON_FAULT FEATURES"
        usesh: true
        sync: rsync
        copyback: false
        # We need jq to run show-utils.sh and bash to use inline shell string replacement
        # install rust, rust-rustfmt and rust-clippy (version 1.72.1) from OpenBSD 7.4 release
        prepare: |
          pkg_add -I coreutils curl sudo-1.9.14.2 jq bash
          pkg_add -I rust rust-rustfmt rust-clippy
        run: |
          # Code inspired from rustup project https://github.com/rust-lang/rustup/blob/master/.github/workflows/ci.yaml
          export REPO_NAME=${GITHUB_WORKSPACE##*/}
          export WORKSPACE_PARENT="/home/runner/work/${REPO_NAME}"
          export WORKSPACE="${WORKSPACE_PARENT}/${REPO_NAME}"

          # Generate random password for user
          PASSWD=$(encrypt $(openssl rand -base64 12))

          echo "## whoami"
          whoami

          echo "## create non-root user and log into it"
          useradd -d "/root" -g wheel -c "Coreutils user for tests" -s $(which bash) -p ${PASSWD} tester
          chown -R tester:wheel /root/ "${WORKSPACE_PARENT}"/

          # Further work needs to be done in a sudo as we are changing user
          sudo -E -u tester bash ci/openbsd_style_lint.sh

  test:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      fail-fast: false
    env:
      mem: 4096
    steps:
    - uses: actions/checkout@v4
    - name: Prepare, build and test
      uses: vmactions/openbsd-vm@v1.0.6
      with:
        envs: "STYLE_FAIL_ON_FAULT FEATURES"
        usesh: true
        sync: rsync
        copyback: true
        # install rust (version 1.72.1) from OpenBSD 7.4 release
        prepare: |
          pkg_add -I coreutils curl sudo-1.9.14.2 bash
          pkg_add -I rust zstd
        run: |
          # Code inspired from rustup project https://github.com/rust-lang/rustup/blob/master/.github/workflows/ci.yaml
          #
          # We need a file-descriptor file system to test test_ls::test_ls_io_errors
          # mount -t fdescfs fdesc /dev/fd
          #
          set -e

          export REPO_NAME=${GITHUB_WORKSPACE##*/}
          export WORKSPACE_PARENT="/home/runner/work/${REPO_NAME}"
          export WORKSPACE="${WORKSPACE_PARENT}/${REPO_NAME}"

          # Generate random password for user
          PASSWD=$(encrypt $(openssl rand -base64 12))

          echo "## whoami"
          whoami

          echo "## create non-root user and log into it"
          useradd -d "/root" -g wheel -c "Coreutils user for tests" -s $(which bash) -p ${PASSWD} tester
          chown -R tester:wheel /root/ "${WORKSPACE_PARENT}"/

          # Further work needs to be done in a sudo as we are changing user
          sudo -E -u tester bash ci/openbsd_tests.sh

          # Change ownership for copyback files from VM to host
          chown -R root:wheel /root/ "${WORKSPACE_PARENT}"/

          # Check tests results
          if [ -f ${WORKSPACE}/tests-ok ]; then
              rm ${WORKSPACE}/tests-ok
              exit 0
          else
              exit 1
          fi

    - name: Generate Markdown report for tests results
      run: |
        if [ -f tests-unix.json ]; then
            ci/get_tests_results.sh tests-unix.json unix >> $GITHUB_STEP_SUMMARY
        fi
        if [ -f tests-uucore.json ]; then
            ci/get_tests_results.sh tests-uucore.json uucore >> $GITHUB_STEP_SUMMARY
        fi
